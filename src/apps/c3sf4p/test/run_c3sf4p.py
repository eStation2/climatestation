from src.apps.c3sf4p.c3s_f4p import Fitness4Purpose


def run_f4p(file_list, prod_list):
    """

    @param file_list:
    @param prod_list:
    @return:        This test mimics 2 different situations in 'forced' one single statement.
                    In the first scenario is mimic the situation where a user selects a common date for 2 distinct
                    datasets and wants to see how the data fits to each other using the density scatter plot feature

                    In the second scenario, the user selects a temporal series for a single dataset, and wants to look
                    at the full series in once, using the Hovmöller diagram

                    The third scenario is similar to the second (same input parameters) but this time the user is
                    requiring the trend analysis, a trend map is then generated by the tool.
    """
    # 1st Scenario:
    # in this case the parameter file_list contains only 2 datatsets: file_list = [[fullname1], [fullname2]] in the
    # case the f4p.scatter_plot() generates 1 figure the scatter plot between dataset1 and dateset2 where dataset1 is
    # along x-axis and dataset 2 along y-axis
    f4p_scatter = Fitness4Purpose([[file_list[0][0]], [file_list[1][0]]], prod_list, ecv='FAPAR',
                                  region_name='Africa', region_coordinates=None, dbg=True)
    f4p_scatter.scatter_plot()

    # 2nd Scenario:
    # In this case file_list contains a temporal series of the selected dataset, relative to a single band given in the
    # 'prod_list' attribute. The tool generates a Hovmöller diagram.
    f4p = Fitness4Purpose([file_list[0]], [prod_list[0]], ecv='FAPAR',
                          region_name='Africa', region_coordinates=None, dbg=True)
    f4p.latitudinal_average_plot()

    # 3rd Scenario:
    # This scenario uses the same initialisation for the f4p object but just calls a different method, the objective
    # here is to generate a trend map, only significant (statistically) trend will be displayed.
    f4p.trend_analysis()


if __name__ == '__main__':
    flist = [[], []]
    band_list = []
    # TODO fill the lists with proper CS datasets

    run_f4p(flist, band_list)
